@page "/register"

@using System.Drawing;
@using System.IO;
@using System.Net.Http
@using System.Timers
@using MessengerWeb.Client.Services
@implements IAsyncDisposable

@inject IJSRuntime JSRuntime;
@inject HttpClient Http
@inject Services.EnginesHttpRepository Repository

<div>
    <h1>Регистрация</h1>
</div>

<div>
    <video class="round-border" id="video" width="480" height="360" autoplay></video>
    <canvas class="round-border"  id="capturedImage" width="480" height="360"></canvas>
</div>

<div>
    <button type="button" class="btn btn-secondary" @onclick="@(() => RegisterInExternalApi(null, null))">Зарегистрировать</button>
</div>

 <h3>@RegisterResponse</h3>

@code {
    private string RegisterResponse { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await StartVideo();
    }

    private async Task StartVideo()
    {
        await JSRuntime.InvokeVoidAsync("startVideo");
    }

    private async Task StopCamera()
    {
        await JSRuntime.InvokeVoidAsync("stopVideo");
    }

    private async void RegisterInExternalApi(object source, ElapsedEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("Snap", "video", "capturedImage");
        var imageBytes = await JSRuntime.InvokeAsync<string>("GetImageData", "capturedImage", "image/jpeg");
        string result = await Repository.Post(imageBytes, Http, "Home/register");

        if (result == "failed") RegisterResponse = "Лицо уже зарегистрировано";
        else if (result != String.Empty) RegisterResponse = $"Новое лицо зарегистрировано! ID: \"{result}\"";
        else RegisterResponse = "Лицо отсутствует в кадре.";

        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await StopCamera();
    }
}