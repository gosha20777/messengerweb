@page "/"

@using System.Drawing;
@using System.IO;
@using System.Net.Http
@using System.Timers
@using MessengerWeb.Client.Services
@implements IDisposable

@inject IJSRuntime JSRuntime;
@inject HttpClient Http
@inject Services.EnginesHttpRepository Repository

<div>
    <h1>Детекция</h1>
     <button type="button" class="btn btn-primary" @onclick="StartCamera">Включить камеру</button>
</div>

<video id="video" width="320" height="240" controls></video>

<div>
    <button type="button" class="btn btn-primary" @onclick="@(() =>GetLivenessFromExternalApi(null, null))">Принудительный обмен данными</button>
</div>

  <canvas id="capturedImage" width="320" height="240" style="display: none"></canvas>
  <h1>Liveness: @LivenessResponse</h1>
  <h1>Match: @MatchResponse</h1>

@code {
    private string LivenessResponse { get; set; }
    private string MatchResponse { get; set; }

    private Timer _livenessTimer;
    private Timer _matchingTimer;

    protected override void OnInitialized()
    {
        _livenessTimer = new Timer(interval: 5000);
        _matchingTimer = new Timer(interval: 5000);

        _livenessTimer.Elapsed += GetLivenessFromExternalApi;
        _matchingTimer.Elapsed += GetMatchFromExternalApi;
    }

    private async Task StartCamera()
    {
        await JSRuntime.InvokeVoidAsync("startVideo");

        _livenessTimer.Enabled = true;
        _matchingTimer.Enabled = true;
    }

    private async void GetLivenessFromExternalApi(object source, ElapsedEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("Snap", "video", "capturedImage");
        var imageBytes = await JSRuntime.InvokeAsync<string>("GetImageData", "capturedImage", "image/jpeg");
        LivenessResponse = await Repository.Post(imageBytes, Http, "Home/liveness");
        StateHasChanged();
    }

    private async void GetMatchFromExternalApi(object source, ElapsedEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("Snap", "video", "capturedImage");
        var imageBytes = await JSRuntime.InvokeAsync<string>("GetImageData", "capturedImage", "image/jpeg");
        MatchResponse = await Repository.Post(imageBytes, Http, "Home/match");
    }

    void IDisposable.Dispose()
    {
        _livenessTimer.Enabled = false;
        _matchingTimer.Enabled = false;
    }
}