@page "/"

@using System.Drawing;
@using System.IO;
@using System.Net.Http
@using System.Timers
@using MessengerWeb.Client.Services
@using Microsoft.Extensions.Logging
@using System.Globalization
@implements IAsyncDisposable

@inject IJSRuntime JSRuntime;
@inject HttpClient Http
@inject EnginesHttpRepository Repository
@inject Services.Settings SettingsService
@inject ILogger<Index> Logger

<h1>Детекция</h1>

<div style="display: flex">
    <label class="switch">
        <input type="checkbox"
            id="flexSwitchCheckDefault" 
            @onchange="@(async (e) => await ToggleCamera())">>
        <span class="slider round"></span>
    </label>
    <h3 style="margin-left:10px">Камера</h3>
</div>

<div style="display: flex">
    <video class="round-border" id="video" width="480" height="360" controls></video>
<div class="container">
  <div class="column">
    @if(!LivenessGood)
    {
     <div class="alert alert-warning alert-dismissible fade show">
        <strong></strong> Лица в кадре не обнаружены.
    </div>
    }

    @if(!MatchGood)
    {
         <div class="alert alert-warning alert-dismissible fade show">
            <strong></strong> Не удалось опознать лицо. Угроза безопасности!
        </div>
    }
    </div>
    </div>
</div>

<div style="margin-top:10px">
    <button class="btn btn-secondary" 
            type="button" 
            @onclick="@(() =>GetLivenessFromExternalApi(null, null))">
            Принудительный обмен данными
    </button>
</div>

 <canvas id="capturedImage" width="480" height="360" style="display: none"></canvas>
 <h1>Витальность: @LivenessResponse</h1>
 <h1>Данные о персоне: @MatchResponse</h1>

@code {
    private string LivenessResponse { get; set; }
    private string MatchResponse { get; set; }

    private bool LivenessGood { get; set; } = true;
    private bool MatchGood { get; set; } = true;

    private Timer _livenessTimer;
    private Timer _matchingTimer;

    private bool CameraOn { get; set; }

    private EngineEntity CurrentEngine { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CurrentEngine = SettingsService.Engines.FirstOrDefault(e => e.IsSelected);

        int timerIntervalinMs = CurrentEngine.Engine == Engine.Ntech ? 5000 : 5000;

        _livenessTimer = new Timer(interval: timerIntervalinMs);
        _matchingTimer = new Timer(interval: timerIntervalinMs);

        _livenessTimer.Elapsed += GetLivenessFromExternalApi;
        _matchingTimer.Elapsed += GetMatchFromExternalApi;

        var lDotNetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("dotNetGlobal.SetDotnetReference", lDotNetReference);
        ClearPage();
    }

    private async Task ToggleCamera()
    {
        if(!CameraOn)
        {
            await StartCamera();
            CameraOn = true;
        }
        else
        {
            await StopCamera();
            CameraOn = false;
        }
    }

    private async Task StartCamera()
    {
        await JSRuntime.InvokeVoidAsync("startVideo");

        _livenessTimer.Enabled = true;
        _matchingTimer.Enabled = true;
    }

    private async Task StopCamera()
    {
        await JSRuntime.InvokeVoidAsync("stopVideo");

        _livenessTimer.Enabled = false;
        _matchingTimer.Enabled = false;
        ClearPage();
    }

    private async void GetLivenessFromExternalApi(object source, ElapsedEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("Snap", "video", "capturedImage");
        var imageBytes = await JSRuntime.InvokeAsync<string>("GetImageData", "capturedImage", "image/jpeg");

        if (CurrentEngine.Engine == Engine.Ntech)
        {
            LivenessResponse = await JSRuntime.InvokeAsync<string>("recordVideoAndSendToServer", "Home/liveness", CurrentEngine.UUID);
        }
        else
        {
            LivenessResponse = await Repository.Post(imageBytes, "Home/liveness", CurrentEngine.UUID);

            Logger.LogInformation($"LivenessResponse: {LivenessResponse}");
            var liveness = LivenessResponse?.Replace('.', ',');
            LivenessGood = Double.TryParse(liveness, out _) && Convert.ToDouble(liveness) != 0 ? true : false;
            Logger.LogInformation($"LivenessGood: {LivenessGood}");
        }
        StateHasChanged();
    }

    [JSInvokable("GetLivenessFromNtech")]
    public void GetLivenessFromNtech(string nTechLivenessResult)
    {
        LivenessResponse = nTechLivenessResult;
        LivenessGood = Double.TryParse(LivenessResponse.Replace('.', ','), out _) 
                            && Convert.ToDouble(LivenessResponse.Replace('.', ',')) != 0 ? true : false;
    }


    private async void GetMatchFromExternalApi(object source, ElapsedEventArgs e)
    {
        await JSRuntime.InvokeVoidAsync("Snap", "video", "capturedImage");
        var imageBytes = await JSRuntime.InvokeAsync<string>("GetImageData", "capturedImage", "image/jpeg");
        MatchResponse = await Repository.Post(imageBytes, "Home/match", CurrentEngine.UUID);
        MatchGood = MatchResponse.Contains("not_identified") ? false : true;
        Logger.LogInformation($"Matched: {MatchGood}");

        StateHasChanged();

    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        _livenessTimer.Enabled = false;
        _matchingTimer.Enabled = false;

        _livenessTimer.Elapsed -= GetLivenessFromExternalApi;
        _matchingTimer.Elapsed -= GetMatchFromExternalApi;

        if(CameraOn)
            await StopCamera();
        ClearPage();
    }

    public void ClearPage()
    {
        LivenessResponse = String.Empty;
        MatchResponse = String.Empty;
        LivenessGood = true;
        InvokeAsync(StateHasChanged);
    }
}